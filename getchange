__author__ = 'mlowery'

import argparse
from datetime import datetime
import json
import os
import re
import subprocess
import sys


def make_parser():
    description = """Cherry-pick Gerrit change (including dependencies) on a
new branch given only a "change-ish". A changeish is any of the following:
* Commit hash
* Gerrit Change-Id
    * Either 41-character ID, or
    * "Change-Id: xyz" (Copy to Clipboard button in Gerrit)
* Gerrit number
* URL (two styles)
    * https://review.openstack.org/#/c/123/
    * https://review.openstack.org/123
    """
    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=argparse.RawDescriptionHelpFormatter
                                     )

    parser.add_argument('-c', '--change',
                        metavar='<change-ish>',
                        required=True,
                        help='Change-Id, Gerrit number, or URL of some sort')
    return parser


def err(msg):
    print(msg)
    sys.exit(1)


def parse_change_arg(change_arg):
    # Gerrit "number"
    m = re.search(r'^(\d+)$', change_arg)
    if m:
        return m.group(1)

    # Gerrit Change-Id
    m = re.search(r'^(I[0-9a-f]{40})$', change_arg)
    if m:
        return m.group(1)

    # git hash
    m = re.search(r'^([0-9a-f]{40})$', change_arg)
    if m:
        return m.group(1)

    # Copy to Clipboard button result
    m = re.search(r'^Change-Id: (I[0-9a-f]{40})$', change_arg)
    if m:
        return m.group(1)

    # URL
    m = re.search(r'^https?://[^/]+/#/c/(\d+)/?[\d]*$', change_arg)
    if m:
        return m.group(1)

    # Copy URL button result
    m = re.search(r'^https?://[^/]+/(\d+)/?[\d]*$', change_arg)
    if m:
        return m.group(1)

    return None


def get_gerrit_json(changeish):
    cmd = ('ssh review gerrit '
           'query "%s" '
           '--current-patch-set '
           '--format JSON'
           % changeish)
    #print(cmd)
    # last line of output is a "stats" line; ignore it
    lines = check_output(cmd).splitlines()
    if len(lines) == 1:
        return None
    stdout = lines[0]
    #print(stdout)
    return json.loads(stdout)


def make_cherry_pick_cmd(change_json):
    project = change_json['project']
    ref = change_json['currentPatchSet']['ref']
    proto_and_host = re.search(r'(.*)/.*', change_json['url']).group(1)
    return ('git fetch %(proto_and_host)s/%(project)s %(ref)s && '
            'git cherry-pick FETCH_HEAD' % locals())


def get_changes(change, changes):
    j = get_gerrit_json(change)
    if not j:
        return
    changes.insert(0, j)
    parents = (j['currentPatchSet']['parents'])
    for parent in parents:
        get_changes(parent, changes)


def check_output(cmd):
    # shell is necessary to use PATH
    return subprocess.check_output(cmd, shell=True)


def check_call(cmd):
    # hide output
    fnull = open(os.devnull, 'w')
    # shell is necessary to use PATH
    subprocess.check_call(cmd,
                          stdout=fnull,
                          stderr=subprocess.STDOUT,
                          shell=True)


def setup_git_branch(changes):
    change_json = changes[-1]
    cmd = 'git stash save -u stash_by_%s' % os.path.basename(__file__)
    check_call(cmd)

    start_point = 'origin/%s' % change_json['branch']
    branch_name = '%s_%s/%s' % (os.path.basename(__file__),
                                change_json['number'],
                                change_json['currentPatchSet']['number'])
    cmd = 'git branch -v'
    out = check_output(cmd)
    if re.search(r'^\*?[\s]+%(branch_name)s[\s]+' % locals(),
                 out,
                 flags=re.MULTILINE):
        date = datetime.now().strftime('%Y_%m_%d__%H_%M_%S')
        print('INFO: Backing up existing branch "%(branch_name)s"' %
              locals())
        cmd = ('git branch -m %(branch_name)s %(branch_name)s_%(date)s' %
               locals())
        check_output(cmd)

    print('INFO: Creating branch "%(branch_name)s"' % locals())
    cmd = 'git checkout -b %(branch_name)s %(start_point)s' % locals()
    check_call(cmd)
    print('INFO: Pulling in latest from %(start_point)s' % locals())
    cmd = 'git pull --ff-only'
    check_call(cmd)

    # sanity check (make sure we're in the right project)
    merged_commit = changes[0]['currentPatchSet']['parents'][0]
    cmd = 'git merge-base --is-ancestor %(merged_commit)s HEAD' % locals()
    try:
        check_call(cmd)
    except subprocess.CalledProcessError as e:
        #print(e.cmd)
        err('ERROR: Parent commit of first change is not ancestor of HEAD')


def main():
    try:
        args = make_parser().parse_args()
        #print(args.change)

        if not os.path.exists('./.git'):
            err('ERROR: "%s" is not a git repo' % os.getcwd())

        change = parse_change_arg(args.change)
        if not change:
            err('ERROR: Could not parse change "%s"' % args.change)
        #print('change=%s' % change)

        changes = []
        get_changes(change, changes)
        #print(changes)
        setup_git_branch(changes)

        for c in changes:
            subprocess.check_call(make_cherry_pick_cmd(c), shell=True)
    except subprocess.CalledProcessError as e:
        err('ERROR: The following command failed:\n    %s' % e.cmd)
        #print(e.output)


if __name__ == "__main__":
    main()